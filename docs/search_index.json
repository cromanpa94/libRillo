[["index.html", "LibRillo de R y Biologia Prólogo", " LibRillo de R y Biologia Cristian Román Palacios 2023-03-20 Prólogo Este libro es una compilacion para consulta rapida sobre diferentes aspectos que combinan el uso de R con diferentes temas de biologia. El LibRillo de R y Biologia pretende servir de referencia sobre temas particulares, enfocando capitulos sobre objetivos especificos y desarrollando brevemente el contenido principalmente alrededor de un parquete en R. Este librillo cubre temas que engloban desde lo mas fundamental en R asi como aplicaciones que combinan R, git, GitHub, entre otros. "],["estructura-del-libro.html", "Estructura del libro", " Estructura del libro Este LibRillo de R y Biologia pretende avanzar a quien lo consulte en temas especificos que relacionan diferentes ambitos y aspectos biologicos con R. Sin embargo, el libro no se enfoca solamente en revisar la aplicacion de conceptus usando tecnicas. En el capitulo 1 XXX… "],["convenciones-generales-del-libro.html", "Convenciones generales del libro", " Convenciones generales del libro Este libro fue generado usando principalmente R knitr y bookdown. En general, los bloques de codigo que se incluyen en el libro permiten una ejecucion sencilla e intuitiva de los temas. En diferentes secciones del libro, se pretende generar salidad graficas y numericas directamente usando codigos en R. Al inicio de cada capitulo incluyo informacion sobre los paquetes que son relevantes para llevar a cabo los diferentes objetivos del mismo. La informacion contenida en este libro fue compilada usando la siguiente sesion de R: sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS 13.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods ## [7] base ## ## other attached packages: ## [1] forcats_0.5.1 stringr_1.4.0 dplyr_1.1.0 ## [4] purrr_0.3.4 readr_2.1.2 tidyr_1.2.0 ## [7] tibble_3.1.7 ggplot2_3.4.1 tidyverse_1.3.2 ## [10] data.table_1.14.2 ## ## loaded via a namespace (and not attached): ## [1] lubridate_1.8.0 assertthat_0.2.1 digest_0.6.29 ## [4] utf8_1.2.2 R6_2.5.1 cellranger_1.1.0 ## [7] sys_3.4 backports_1.4.1 reprex_2.0.1 ## [10] evaluate_0.15 httr_1.4.3 pillar_1.7.0 ## [13] rlang_1.0.6 googlesheets4_1.0.0 readxl_1.4.0 ## [16] rstudioapi_0.13 jquerylib_0.1.4 rmarkdown_2.14 ## [19] googledrive_2.0.0 munsell_0.5.0 broom_1.0.1 ## [22] compiler_4.2.0 modelr_0.1.8 xfun_0.36 ## [25] pkgconfig_2.0.3 askpass_1.1 htmltools_0.5.2 ## [28] openssl_2.0.2 tidyselect_1.2.0 bookdown_0.27 ## [31] fansi_1.0.3 crayon_1.5.1 tzdb_0.3.0 ## [34] dbplyr_2.1.1 withr_2.5.0 grid_4.2.0 ## [37] jsonlite_1.8.0 gtable_0.3.0 lifecycle_1.0.3 ## [40] DBI_1.1.2 magrittr_2.0.3 credentials_1.3.2 ## [43] scales_1.2.0 cli_3.6.0 stringi_1.7.6 ## [46] fs_1.5.2 xml2_1.3.3 bslib_0.3.1 ## [49] ellipsis_0.3.2 generics_0.1.2 vctrs_0.5.2 ## [52] tools_4.2.0 glue_1.6.2 hms_1.1.1 ## [55] fastmap_1.1.0 yaml_2.3.5 colorspace_2.0-3 ## [58] gargle_1.2.0 rvest_1.0.2 knitr_1.39 ## [61] haven_2.5.0 sass_0.4.1 usethis_2.1.6 Pretendo no agregar simbolos como &gt; y + en el codigo de R dentro de este libro. En general, los codigos aparecen destacados en cajas grises: a &lt;- c(2, 4, 5) Las salidas de codigo tambien aparecen en un bloque gris. Sin embargo, las lineas de salida incluyen los caracteres ## antes del contenido de cada linea. Por ejemplo, multipliquemos el vector a creado anteriormente por 20: ## [1] 40 80 100 La salida de esta operacion necesariamente tiene los ## en el bloque. Por lo tanto, unicamente el codigo que no tiene ## debe ser copiado (en caso de ser necesario). Las salidas de codigo realmente no son ran relevantes para reproducir el codigo. Por ultimo, el nombre de paquetes se indica en negrilla dentro del texto (e.g. bookdown), las functiones se presentan seguidas de parentesis (e.g. render_book()), los dobles dos puntos (::) significan que un determinado objeto pertenece a un paquete determinado (e.g. bookdown::render_book()), y codigos en el texto aparecen en formato de maquina de escribir (e.g. R). Estas son las convenciones mas generales del libro. Otras convenciones mas particulares y relevantes a otros temas seran discutidas en los capitulos siguientes. "],["dedicacion.html", "Dedicacion", " Dedicacion Este libro esta escrito principalmente para estudiantes de universidades publicas o pertenecientes a grupos historicamente excluidos de la academia. Escribo el libro con mucho cariño, pensando en que ayudara a equilibrar la balanza entre quienes tienen acceso directo a recursos “avanzados” en ingles y aquellos que por diferentes razones, solamente acceden a informacion en español. El libro es de acceso abierto y no pretendo cobrar por su uso. "],["agradecimientos.html", "Agradecimientos", " Agradecimientos Mis agradecimientos mas fuertes van para mi padre y madre, Cesar Roman y Yocasta Palacios. Al parecer, de mi padre, Ictiologo y profesor titular en la Universidad del Quindio, termine heredando la profesion. De mi madre, profesora de preescolar en diferentes instituciones del Quindio (Colombia), la pasion y paciencia por enseñar y ayudar. Grandes agradecimientos van tambien a mi hermano, Carlos, ingeniero en sistemas, gran programador y conversador, quien por su cercania me mostro que escribir codigo (al menos al nivel basico que yo hago), no es imposible. Este libro lo empiezo a escribir estado en Tucson, AZ. Gracias a mi pareja, Heidi E. Steiner, quien me apoya con su actitud, tiempo, y cariño, mientras me dedico por raticos a escribir apartados de este libro. A estos cuatro personajes, motor de mi vida, todo mi cariño y admiracion. "],["sobre-el-autor.html", "Sobre el autor", " Sobre el autor Cristian Román Palacios es Profesor Asistente en la Universidad de Arizona desde el 2021. Cristian es Biologo de la Universidad del Valle (2015), Magister y Ph.D. en Ecologia y Evolucion (2019, 2020) de la Universidad de Arizona, con cargos postdoctorales en Temple University (2021) y University of California, Los Angeles (2021). Los interestes investigativos de Cristian contemplan temas de evolucion a grandes escalas taxonomicas, asi como la relacion entre cambio climatico y diversidad. Sin embargo, el aprendizaje de areas relacionadas con programacion resulto ser una prioridad durante su formacion academica. Ahora pretende divulgar de forma sencilla, contenidos de R y biologia usando diferentes recursos, uno de estos son los libros. Actualmente, Cristian enseña cursos de Machine Learning y Data Mining en la Escuela de La Informacion, en la Universidad de Arizona. Mas informacion sobre el autor esta disponible en su pagina web. "],["1-una-breve-introduccion-a-r.html", "Capitulo 1 Una breve introduccion a R", " Capitulo 1 Una breve introduccion a R R será el principal lenguaje que guiara el libro. En diferentes disciplinas biologicas, el uso de R se ha extendido significativamente durante la ultima decada. Sin embargo, R, por ser un lenguaje principalmente enfocado en aspectos estadisticos, tiene ciertas limitaciones en cuanto a velocidad y flexibilidad. Por otro lado, debido a la compartimentalizacion de implementaciones metodologicas en codigo, aprender y usar R es probablemente central en un campo biologico determinado pero no en otros. Otros recursos pueden ser usados para seguir la estructura del presente libro en otros lenguajes (e.g. python). Por ahora, nos enfocaremos en como instalar y usar R. Por simplicidad, vamos a procurar trabajar desde RStudio. "],["1.1-r-y-rstudio.html", "1.1 R y RStudio", " 1.1 R y RStudio Aunque no son equivalentes, en diferentes contextos, R y RStudio se usan erroneamente de forma intercambiable. R es explicitamente un lenguaje de programacion, desarrollado por decadas como parte del R Core Team y la R Foundation for Statistical Computing. En pocas palabras, R es un lenguaje en si mismo, que esta enfocado en computaciones estadisticas. RStudio requiere de R para functionar. Especificamente, RStudio permite manejar (potentialmente) mas eficientemente y esteticamente el espacio de trabajo en R. 1.1.1 Instalando R y RStudio Dependiendo del sistema operativo en consideracion, existen multiples maneras de instalar R. En MacOS, vamos a usar homebrew para instalar paquetes y demas software que necesitemos. Para instalar homebrew, pueden correr la siguiente linea en la linea de comandos: /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Si estan usando linux, intentaremos hacer las instalaciones usando apt install para instalar programas desde la linea de comandos. En Windows, los ejecutables estan generalente disponibles para los programas que estaremos usando. 1.1.1.1 Instalando R En linux, la instalacion de R normalente requiere de un par de comandos: sudo apt update sudo apt install r-base En MacOs y desde homebrew, la instalacion de R involucra la siguiente linea: brew install r En Linux y MacOs, la instalacion debe crear una nueva aplicacion. Sin embargo, desde la misma linea de comandos, correr R debe permitir ingresar a R directamente. Por ultimo, es potentialmente preferible descagar e instalar R usando el instalador en la pagina oficial de R project usando este link. 1.1.1.2 Instalando RStudio Instalar RStudio no es totalmente necesario para seguir las instrucciones en todos los capitulos de este librillo. Sin embargo, es ultil para muchas de ellas. Por otro lado, RStudio no es completamente necesario para correr R. Para descargarlo e instalarlo pueden seguir las instrucciones en la pagina oficial de RStudio. RStudio tambien puede ser instalado desde la linea de comando. En Ubuntu Linux, instalar RStudio toma las siguientes lineas: sudo apt update sudo apt install gdebi-core wget https://cdn.rstudio.com/package-manager/ubuntu/amd64/rstudio-pm_2022.04.0-7_amd64.deb sudo gdebi rstudio-pm_2022.04.0-7_amd64.deb En MacOS, homebrew puede usarse para instalar RStudio muy facilmente: brew install --cask rstudio En Windows, la recomendacion es descargar la aplicacion directamente desde la pagina de RStudio en el siguiente enlace. "],["1.2-primeros-pinitos-en-r.html", "1.2 Primeros pinitos en R", " 1.2 Primeros pinitos en R Ahora que tenemos R instalado vamos a empezar a conocer algunos aspectos basicos del lenguaje! R es un lenguaje simbolo-orientado, lo que significa que el usuario no necesita conocer los detalles de la computacion para entender el codigo. Por ejemplo, si queremos crear un vector con los numeros del 1 al 10, lo podemos hacer de la siguiente manera: mi_vector &lt;- 1:10 No hay que olvidar que R es un lenguaje interactivo. Esto significa que el usuario puede interactuar con el codigo y ver los resultados inmediatamente. Por ejemplo, para ver el contenido del vector previamente definido, corremos la siguiente linea: mi_vector ## [1] 1 2 3 4 5 6 7 8 9 10 El resultado debe ser 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. Ademas de los vectores, R tambien puede usarse para definir matrices. Por ejemplo, si queremos crear una matriz con los numeros del 1 al 9, usamos la siguiente linea: mi_matriz &lt;- matrix(1:9, nrow = 3, ncol = 3) Para ver los contenidos de la matriz, corremos la siguiente linea: mi_matriz ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 Vamos ahora a revisar como exportar datos en R! 1.2.1 Exportar datos R es capaz de exportar datos a diferentes formatos. Por ahora, vamos a enfocarnos en el formato tabular csv. Este formato es especialmente útil cuando los datos se quieren compartir con otras personas. Para exportar datos a csv, se puede usar la función write.csv(). Por ejemplo, para exportar los datos del vector mi_vector, se puede correr la siguiente línea: write.csv(mi_vector, file = &#39;mi_vector.csv&#39;) Esto creará un archivo csv llamado mi_vector.csv en el directorio especificado. Para exportar la matriz mi_matriz, se puede correr la siguiente línea: write.csv(mi_matriz, file = &#39;mi_matriz.csv&#39;) Esto creará un archivo csv llamado mi_matriz.csv en el directorio especificado. "],["1.3-r-un-poco-mas-avanzado.html", "1.3 R un poco mas avanzado…", " 1.3 R un poco mas avanzado… Ya vimos brevemente como crear datos en R, un par de estructuras y como exportarlos. Vamos a hablar ahora un poco sobre como hacer cambios en la estructura de los datos (i.e. procesamiento). 1.3.1 for loops Un for loop es una estructura de control en R que permite repetir una acción una cierta cantidad de veces. Por ejemplo, para imprimir los números del 1 al 10, se puede usar el siguiente for loop: for (i in 1:10) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 Este for loop recorrerá el vector 1:10 e imprimirá cada elemento del vector. La variable i es una variable temporal que se usa para almacenar los valores del vector. Esto quiere decir que cada vez que el for loop se ejecuta, i tomará el valor del elemento actual del vector. Los for loops también se pueden usar para realizar operaciones matemáticas. Por ejemplo, para realizar la suma de los números del 1 al 10, se puede usar el siguiente for loop: suma &lt;- 0 for (i in 1:10) { suma &lt;- suma + i } print(suma) ## [1] 55 En este for loop, la variable suma se usa para almacenar el resultado de la suma. Cada vez que el for loop se ejecuta, el valor de suma se actualiza con el resultado de la suma de la variable i. Al final de la ejecución, el valor de suma será 55`. 1.3.2 Vectorizando R es un lenguaje de computación vectorizado, lo que significa que los bucles for no son necesarios para realizar operaciones matemáticas. Esto permite que se realicen operaciones más rápido y con menos código. Por ejemplo, para realizar la suma de los números del 1 al 10, no se necesita usar un for loop. En su lugar, se puede usar la función sum() de la siguiente manera: suma &lt;- sum(1:10) print(suma) ## [1] 55 Esto imprimirá el mismo resultado que el for loop anterior (55). Vectorizar los cálculos también es útil para realizar operaciones con matrices. Por ejemplo, para calcular el promedio de los elementos de la matriz mi_matriz, se puede usar la función mean() de la siguiente manera: promedio &lt;- mean(mi_matriz) print(promedio) ## [1] 5 Esto imprimirá el promedio de los elementos de la matriz (5`). 1.3.3 Funciones de la familia *apply Las funciones de la familia apply son un conjunto de funciones de R que permiten aplicar una función a una matriz de forma vectorizada. Esto significa que se pueden realizar operaciones matemáticas sin usar bucles for. Por ejemplo, para calcular la suma de los elementos de la matriz mi_matriz, se puede usar la función apply() de la siguiente manera: suma &lt;- apply(mi_matriz, 1, sum) print(suma) ## [1] 12 15 18 Esto imprimirá la suma de los elementos de cada fila (por eso el segundo elemento es 1) de la matriz (6, 15, 24). Otras funciones de la familia apply son lapply(), sapply() y mapply(). Estas funciones se usan para aplicar una función a una lista, vector o matriz, respectivamente. Por ejemplo, para calcular el promedio de los elementos de la matriz mi_matriz, se puede usar la función apply() de la siguiente manera: promedio &lt;- apply(mi_matriz, 2, mean) print(promedio) ## [1] 2 5 8 Esto imprimirá el promedio de los elementos de cada columna de la matriz (2, 5, 8). 1.3.4 data.table data.table es un paquete de R que permite manipular grandes cantidades de datos de una manera más eficiente que otros paquetes. Por ejemplo, para cargar un conjunto de datos en R, se puede usar la función read.csv(). Sin embargo, esta función puede ser muy lenta cuando se trabaja con grandes conjuntos de datos. En su lugar, se puede usar la función fread() de data.table para cargar los datos de una manera más rápida. Por ejemplo, para cargar el conjunto de datos mi_datos.csv, se puede usar la siguiente línea: library(data.table) mi_matriz &lt;- fread(&quot;mi_matriz.csv&quot;) Además de la carga de datos, data.table también permite realizar operaciones de manipulación y agregación de datos de una manera más eficiente que otras funciones. Por ejemplo, para calcular el promedio de los datos en la tabla mi_datos, se puede usar la función data.table() de la siguiente manera: promedio &lt;- data.table(mi_matriz)[, mean(mi_matriz$valor)] ## Warning in mean.default(mi_matriz$valor): argument is not numeric or ## logical: returning NA print(promedio) ## [1] NA Esto imprimirá el promedio de los datos en la tabla. 1.3.5 El tidyverso Tidyverse es un conjunto de paquetes y herramientas de R que permiten realizar análisis de datos de manera más eficiente y fácil. Estos paquetes incluyen dplyr, tidyr, ggplot2, readr y purrr. Estos paquetes se usan para realizar operaciones de manipulación, agregación, visualización y análisis de datos. 1.3.6 dplyr Dplyr es un paquete de R que permite manipular grandes conjuntos de datos de una manera más eficiente. Esto se logra usando una sintaxis fácil de leer y entender. Por ejemplo, para filtrar los datos en la tabla mi_datos, se puede usar la función filter() de dplyr de la siguiente manera: library(tidyverse) mi_matriz[,-1] %&gt;% summarise(across(everything(), mean)) ## V1 V2 V3 ## 1 2 5 8 dplyr también cuenta con otras funciones útiles como arrange() para ordenar los datos, select() para seleccionar las columnas deseadas y mutate() para crear nuevas columnas. Estas herramientas permiten realizar operaciones de manipulación de datos de manera mucho más eficiente. "],["2-paginas-web-con-github-rstudio-y-r.html", "Capitulo 2 Paginas web con GitHub, RStudio, y R ", " Capitulo 2 Paginas web con GitHub, RStudio, y R "],["2.1-jekyll.html", "2.1 Jekyll", " 2.1 Jekyll "],["2.2-hugo.html", "2.2 Hugo", " 2.2 Hugo "],["3-usando-github-rstudio-y-r.html", "Capitulo 3 Usando GitHub, RStudio, y R ", " Capitulo 3 Usando GitHub, RStudio, y R "],["3.1-git.html", "3.1 Git", " 3.1 Git Git es un sistema de control de versiones distribuido diseñado para la gestión eficiente y confiable del código fuente. Es una herramienta de desarrollo de software de código abierto y, por lo tanto, se puede utilizar de forma gratuita. Está diseñado para permitir a los desarrolladores compartir, colaborar y controlar los cambios en un proyecto a lo largo del tiempo. Git es una herramienta importante para los científicos de la biología, ya que les permite llevar un registro de los cambios realizados a lo largo del tiempo. Esto permite a los científicos compartir sus trabajos entre sí, así como colaborar entre ellos en un proyecto. Además, Git hace que sea más sencillo realizar experimentos, ya que los científicos pueden volver fácilmente a versiones anteriores de su código en caso de que haya un error. Git también es una herramienta útil para la investigación científica en biología, ya que puede ayudar a los investigadores a llevar un registro de sus experimentos e incluso a compartir sus trabajos con otros. Esto facilita la colaboración entre investigadores y permite a los investigadores compartir sus resultados con otros. Por lo tanto, Git es una herramienta muy útil para la investigación científica en biología, ya que facilita la colaboración entre los científicos, permite llevar un registro de los cambios realizados en un proyecto y facilita el compartir los trabajos entre los investigadores. "],["3.2-github.html", "3.2 GitHub", " 3.2 GitHub GitHub es una plataforma de código abierto que permite a los usuarios compartir, colaborar y almacenar sus proyectos. GitHub ofrece muchas herramientas y características que hacen que el trabajo en equipo sea más eficiente, como herramientas de colaboración, control de versiones, integración con otros servicios, seguridad y privacidad. Estas características hacen que GitHub sea un lugar ideal para almacenar y gestionar proyectos de cualquier tamaño. "],["3.3-github-vs-git.html", "3.3 GitHub vs git", " 3.3 GitHub vs git Git es un sistema de control de versiones diseñado para llevar un registro de los cambios realizados en archivos y directorios. Por otro lado, GitHub es una plataforma de código abierto que permite a los usuarios compartir, colaborar y almacenar sus proyectos. Mientras que Git se utiliza para controlar las versiones de los archivos y directorios, GitHub se utiliza para compartir y colaborar los proyectos entre los usuarios. "],["3.4-rstudio-e-integracion-con-github.html", "3.4 RStudio e integracion con GitHub", " 3.4 RStudio e integracion con GitHub Para integrar RStudio con GitHub necesitamos seguir algunos pasos. Crear una cuenta en https://github.com/join Instalar git (https://git-scm.com/download) Configurar Git con RStudio desde R usando el siguiente script. ## Primero enlazamos nuestro github usando el correo y nombre de usuario usethis::use_git_config(user.name = &quot;TuNombre&quot;, user.email = &quot;tu@email.com&quot;) ## Creamos un token para autenticarnos usethis::create_github_token() ## Ponemos aqui el token que ya creamos: credentials::set_github_pat(&quot;Token&quot;) ## Re-iniciamos R "],["4-regresiones-lineales.html", "Capitulo 4 Regresiones lineales", " Capitulo 4 Regresiones lineales "],["5-regresiones-mas-avanzadas.html", "Capitulo 5 Regresiones mas avanzadas ", " Capitulo 5 Regresiones mas avanzadas "],["5.1-regresiones-bayesianas.html", "5.1 Regresiones Bayesianas", " 5.1 Regresiones Bayesianas "],["6-ecologia-basica.html", "Capitulo 6 Ecologia basica ", " Capitulo 6 Ecologia basica "],["6.1-indices-de-diversidad.html", "6.1 Indices de diversidad", " 6.1 Indices de diversidad "],["6.2-curvas-de-acumulacion.html", "6.2 Curvas de acumulacion", " 6.2 Curvas de acumulacion "],["6.3-rarefaccion.html", "6.3 Rarefaccion", " 6.3 Rarefaccion "],["6.4-usando-datos-del-gbif.html", "6.4 Usando datos del gbif", " 6.4 Usando datos del gbif "],["6.5-modelos-de-distribucion.html", "6.5 Modelos de distribucion", " 6.5 Modelos de distribucion "],["7-filogenetica-basica-en-r.html", "Capitulo 7 Filogenetica basica en R ", " Capitulo 7 Filogenetica basica en R "],["7.1-descargar-secuencias-de-genbank.html", "7.1 Descargar secuencias de GenBank", " 7.1 Descargar secuencias de GenBank "],["7.2-usar-secuencias-existentes.html", "7.2 Usar secuencias existentes", " 7.2 Usar secuencias existentes "],["7.3-alinear-secuencias.html", "7.3 Alinear secuencias", " 7.3 Alinear secuencias "],["7.4-visualizar-alineamientos.html", "7.4 Visualizar alineamientos", " 7.4 Visualizar alineamientos "],["7.5-correr-arboles-filogeneticos.html", "7.5 Correr arboles filogeneticos", " 7.5 Correr arboles filogeneticos "],["7.6-ips.html", "7.6 IPS", " 7.6 IPS "],["7.7-exportar-datos-desde-r.html", "7.7 Exportar datos desde R", " 7.7 Exportar datos desde R "],["8-macroevolucion-basica-en-r.html", "Capitulo 8 Macroevolucion basica en R ", " Capitulo 8 Macroevolucion basica en R "],["8.1-regresiones-filogeneticas.html", "8.1 Regresiones filogeneticas", " 8.1 Regresiones filogeneticas "],["8.2-estimaciones-de-señal-filogenetica.html", "8.2 Estimaciones de señal filogenetica", " 8.2 Estimaciones de señal filogenetica "],["8.3-modelos-sse.html", "8.3 Modelos SSE", " 8.3 Modelos SSE "],["9-web-scraping-con-r.html", "Capitulo 9 Web scraping con R", " Capitulo 9 Web scraping con R "],["10-machine-learning-con-r.html", "Capitulo 10 Machine learning con R ", " Capitulo 10 Machine learning con R "],["10.1-keras-en-r.html", "10.1 Keras en R", " 10.1 Keras en R "],["10.2-tensorflow-en-r.html", "10.2 Tensorflow en R", " 10.2 Tensorflow en R "],["10.3-spark-r.html", "10.3 Spark R", " 10.3 Spark R "],["11-data-mining-con-r.html", "Capitulo 11 Data Mining con R", " Capitulo 11 Data Mining con R "],["12-tests-estadisticos.html", "Capitulo 12 Tests estadisticos", " Capitulo 12 Tests estadisticos "],["13-estadistica-descriptiva-en-r.html", "Capitulo 13 Estadistica descriptiva en R", " Capitulo 13 Estadistica descriptiva en R "],["14-libros-paquetes-apps-en-r.html", "Capitulo 14 Libros, paquetes, apps en R ", " Capitulo 14 Libros, paquetes, apps en R "],["14.1-libros-en-r.html", "14.1 Libros en R", " 14.1 Libros en R "],["14.2-paquetes-en-r.html", "14.2 Paquetes en R", " 14.2 Paquetes en R "],["14.3-shiny-apps-en-r.html", "14.3 Shiny apps en R", " 14.3 Shiny apps en R "],["15-introduccion-a-rmarkdown.html", "Capitulo 15 Introduccion a RMarkdown", " Capitulo 15 Introduccion a RMarkdown "],["16-autocalificar-tareas-en-r.html", "Capitulo 16 Autocalificar tareas en R ", " Capitulo 16 Autocalificar tareas en R "],["16.1-sha.html", "16.1 SHA", " 16.1 SHA "],["16.2-objetos-invisibles-en-el-espacio-de-trabajo.html", "16.2 Objetos invisibles en el espacio de trabajo", " 16.2 Objetos invisibles en el espacio de trabajo "],["17-graficos-en-r.html", "Capitulo 17 Graficos en R ", " Capitulo 17 Graficos en R "],["17.1-graficando-con-r-base.html", "17.1 Graficando con R base", " 17.1 Graficando con R base "],["17.2-graficando-con-ggplot2-en-r.html", "17.2 Graficando con ggplot2 en R", " 17.2 Graficando con ggplot2 en R "],["18-macroevolucion-basica-en-r-1.html", "Capitulo 18 Macroevolucion basica en R ", " Capitulo 18 Macroevolucion basica en R "],["18.1-regresiones-filogeneticas-1.html", "18.1 Regresiones filogeneticas", " 18.1 Regresiones filogeneticas "],["18.2-estimaciones-de-señal-filogenetica-1.html", "18.2 Estimaciones de señal filogenetica", " 18.2 Estimaciones de señal filogenetica "],["18.3-modelos-sse-1.html", "18.3 Modelos SSE", " 18.3 Modelos SSE "],["19-manipulando-datos-en-r.html", "Capitulo 19 Manipulando datos en R", " Capitulo 19 Manipulando datos en R "],["20-bases-de-datos-en-r.html", "Capitulo 20 Bases de datos en R ", " Capitulo 20 Bases de datos en R "],["20.1-sql.html", "20.1 SQL", " 20.1 SQL "],["21-organizando-proyectos-reproducibles.html", "Capitulo 21 Organizando proyectos reproducibles ", " Capitulo 21 Organizando proyectos reproducibles "],["21.1-rstudio-projects.html", "21.1 RStudio projects", " 21.1 RStudio projects "],["21.2-github-repo.html", "21.2 GitHub repo", " 21.2 GitHub repo "],["22-mejores-practicas-r.html", "Capitulo 22 Mejores Practicas R", " Capitulo 22 Mejores Practicas R "],["23-como-pedir-ayuda-de-forma-eficiente.html", "Capitulo 23 Como pedir ayuda de forma eficiente? ", " Capitulo 23 Como pedir ayuda de forma eficiente? "],["23.1-ejemplos-reproducibles.html", "23.1 Ejemplos reproducibles", " 23.1 Ejemplos reproducibles "],["23.2-fuentes-potenciales.html", "23.2 Fuentes potenciales", " 23.2 Fuentes potenciales "],["24-como-hacer-mapas-en-r.html", "Capitulo 24 Como hacer mapas en R ", " Capitulo 24 Como hacer mapas en R "],["24.1-base-r.html", "24.1 Base R", " 24.1 Base R "],["24.2-ggplot.html", "24.2 ggplot", " 24.2 ggplot "],["25-simulando-datos.html", "Capitulo 25 Simulando datos", " Capitulo 25 Simulando datos "],["26-reportes-reproducibles.html", "Capitulo 26 Reportes reproducibles", " Capitulo 26 Reportes reproducibles "],["27-recursos-adicionales.html", "Capitulo 27 Recursos adicionales", " Capitulo 27 Recursos adicionales https://picandoconr.wordpress.com/libros-para-aprender-r/ https://bookdown.org/jboscomendoza/r-principiantes4/ https://fhernanb.github.io/Manual-de-R/intro.html#or%C3%ADgenes https://bookdown.org/chescosalgado/intro_r/ https://bookdown.org/matiasandina/R-intro/ https://fhernanb.github.io/Manual-de-R/intro.html#or%C3%ADgenes https://bookdown.org/content/bda9bd24-47e7-4ecb-85e4-752a913954ce/ https://bookdown.org/content/98faea5e-842f-47ba-be83-493572e28e7b/ https://bookdown.org/content/98faea5e-842f-47ba-be83-493572e28e7b/paralelizacion-con-r-rslurm.html#slurm https://bookdown.org/jorherre/FDATAMINING/ https://bookdown.org/victor_morales/TecnicasML/regresi%C3%B3n-lineal.html https://bookdown.org/rodolfo_carvajal/apunte/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
